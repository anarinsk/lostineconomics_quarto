{
  "hash": "cfbce64e40e4ca8b615b36b67f5a7e61",
  "result": {
    "markdown": "---\ntitle: matplotlib + 한글 Redux\ndescription: 마지막으로 정리해봅시다!\nauthor: JS HUHH\ndate: 12/04/2022\nimage: 'https://miro.medium.com/max/1400/1*aUSZsGFCMPNYCkQygs4aGQ.webp'\ncategories:\n  - computer-tool\ndraft: false\nformat:\n  html:\n    code-fold: show\n    code-line-numbers: true\n    code-overflow: scroll\n    fig-responsive: true\nfilters:\n  - lightbox\nlightbox: auto\n---\n\n## TL; DR\n\n- matplotlib에서 한글 사용 마지막으로 정리한다. \n\n## Not in this Post  \n\n- 한글 폰트 설치 등의 문제는 다루지 않는다. \n\t-  OS 별 한글 폰트 설치 및 활용 [LINK](https://zephyrus1111.tistory.com/7) \n\t- (리눅스) 컨테이너 내에서 한글 폰트 설치 [LINK](https://anarinsk.github.io/lostineconomics_quarto/posts/container/2020-09-24-install-hangul-in-docker.html)\n\n## What in this Post \n\n- matplotlib 그림 안에서 한글 활용의 최종 버전\n\n## matplotlib과 한글의 라벨링\n\nmatplotlib은 표준적인 파이썬 시각화 패키지다. 아쉽게도 이 녀석이 한글과 별로 안 친하다. 그래픽 렌더링 엔진에 한글 폰트가 빠져 있어서 이를 추가로 인식을 시켜야 결과물 내에서 한글 라벨을 쓸 수 있다. 가장 간단한 해결 방법은 나눔고딕 폰트를 쓸 수 있게 해주는 패키지 [koreanize-matplotlib](https://github.com/seongminp/koreanize-matplotlib)를 쓰는 것이다. \n\n먼저 문제부터 살펴보자. 테스트를 위해서 아래 코드에 간단한 함수 `draw_sample(fontprop)`를 작성했다. 인자 `fontprop`은 그래프 요소에 적용될 폰트 특성이다. 값이 없으면 전역적으로 설정된 내용에 따른다. \n\n::: {.cell layout='[-10,70,-10]' execution_count=1}\n``` {.python .cell-code}\nimport matplotlib as mpl\nimport matplotlib.pyplot as plt\nimport matplotlib.font_manager as fm\nimport numpy as np\n\n# 그릴 데이터 생성 \ndef draw_sample(fontprop=None): \n    data = np.random.randint(-100, 100, 50).cumsum()\n    plt.plot(range(50), data, 'r')\n    plt.title('가격변동 추이', fontproperties=fontprop)\n    plt.ylabel('가격', fontproperties=fontprop)\n    plt.show()\n\ndraw_sample()\n```\n\n::: {.cell-output .cell-output-stderr}\n```\nC:\\Users\\junsokhuhh\\Miniconda3\\envs\\for-quarto\\lib\\site-packages\\IPython\\core\\pylabtools.py:152: UserWarning: Glyph 44032 (\\N{HANGUL SYLLABLE GA}) missing from current font.\n  fig.canvas.print_figure(bytes_io, **kw)\nC:\\Users\\junsokhuhh\\Miniconda3\\envs\\for-quarto\\lib\\site-packages\\IPython\\core\\pylabtools.py:152: UserWarning: Glyph 44201 (\\N{HANGUL SYLLABLE GYEOG}) missing from current font.\n  fig.canvas.print_figure(bytes_io, **kw)\nC:\\Users\\junsokhuhh\\Miniconda3\\envs\\for-quarto\\lib\\site-packages\\IPython\\core\\pylabtools.py:152: UserWarning: Glyph 48320 (\\N{HANGUL SYLLABLE BYEON}) missing from current font.\n  fig.canvas.print_figure(bytes_io, **kw)\nC:\\Users\\junsokhuhh\\Miniconda3\\envs\\for-quarto\\lib\\site-packages\\IPython\\core\\pylabtools.py:152: UserWarning: Glyph 46041 (\\N{HANGUL SYLLABLE DONG}) missing from current font.\n  fig.canvas.print_figure(bytes_io, **kw)\nC:\\Users\\junsokhuhh\\Miniconda3\\envs\\for-quarto\\lib\\site-packages\\IPython\\core\\pylabtools.py:152: UserWarning: Glyph 52628 (\\N{HANGUL SYLLABLE CU}) missing from current font.\n  fig.canvas.print_figure(bytes_io, **kw)\nC:\\Users\\junsokhuhh\\Miniconda3\\envs\\for-quarto\\lib\\site-packages\\IPython\\core\\pylabtools.py:152: UserWarning: Glyph 51060 (\\N{HANGUL SYLLABLE I}) missing from current font.\n  fig.canvas.print_figure(bytes_io, **kw)\n```\n:::\n\n::: {.cell-output .cell-output-display}\n![](2022-12-04-matplotlib-korfont-redux_files/figure-html/cell-2-output-2.png){width=593 height=429}\n:::\n:::\n\n\n위 결과에서 보듯이 한글 폰트가 없으니 출력이 제대로 되지 않는다. 이제 `koreanize-matplotlib` 패키지를 설치하고 import 후 실행해보자 \n\n```bash\n$ pip install koreanize-matplotlib \n```\n\n::: {.cell layout='[-10,70,-10]' execution_count=2}\n``` {.python .cell-code}\nimport koreanize_matplotlib\ndraw_sample()\n```\n\n::: {.cell-output .cell-output-display}\n![](2022-12-04-matplotlib-korfont-redux_files/figure-html/cell-3-output-1.png){width=600 height=430}\n:::\n:::\n\n\n`koreanize-matplotlib` 패키지는 나눔고딕 폰트를 자동으로 설치하고 이를 폰트로 잡아 준다. 위에 보는 것처럼 한글 출력에 문제가 없다. \n\n## koreanize-matploitlib 이외의 대안\n\n`koreanize-matplotlib`이 간편하고 좋은 해결책이지만 다른 방법도 있다. 만일을 위해 두 가지를 더 알아보자.  \n\n## 노트북에서 한글 폰트 가져오기 \n\n앞서 링크에서 소개한 폰트 추가 방법은 시스템에 폰트를 먼저 깔고 해당 폰트를 matplotlib에 등록하는 방법이다. pyodide에서 활용할 수 있는 다른 방법은 없을까? 아래 소개할 방법은 ttf 폰트 파일을 바로 matplotlib이 쓸 수 있게 해주는 방법이다.    \n\n::: {.cell layout='[-10,70,-10]' execution_count=3}\n``` {.python .cell-code}\nfont_path = './font/D2Coding v.1.3.2 ligature Nerd Font Complete.ttf' # 폰트 파일의 위치에 따라서 조정\nfont_callsign = 'D2 Coding Nerd'\nfe = fm.FontEntry(\n    fname=font_path,\n    name=font_callsign) # 원하는 폰트 호출 이름 설정 \nfm.fontManager.ttflist.insert(0, fe) # or simply append\n```\n:::\n\n\n:::{.callout-tip}\n#### Code Tips\n- `fm.FontEntry...` 한글 폰트를 matplotlib의 폰트 매니저에 바로 심어주는 명령 \n\t- `font_path`: 폰트의 ttf 파일의 위치와 파일 이름을 지정한다. 각자 알맞게 조정하자.\n\t- `font_callsign`: 내가 지정할 폰트의 이름, 폰트를 호출할 때 활용한다. 각자 취향대로 바꾸자. \n:::\n\n위 방법의 장점은 폰트의 위치를 가리지 않는다는 것이다. 적당한 위치에 두고 matplotlib이 쓸 수 있도록 폰트를 인식시키는 방식이다. 폰트가 잘 인식되었는지 확인해보자.  \n\n::: {.cell execution_count=4}\n``` {.python .cell-code}\nprint([(f.name, f.fname) for f in mpl.font_manager.fontManager.ttflist if ('D2' in f.name) | ('Nanum' in f.name) ])\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[('D2 Coding Nerd', './font/D2Coding v.1.3.2 ligature Nerd Font Complete.ttf'), ('NanumMyeongjo', 'C:\\\\WINDOWS\\\\Fonts\\\\NanumMyeongjo.ttf'), ('NanumBarunpen', 'C:\\\\WINDOWS\\\\Fonts\\\\NanumBarunpenR.ttf'), ('NanumBarunGothic', 'C:\\\\Windows\\\\Fonts\\\\NanumBarunGothic.ttf'), ('NanumGothic', 'C:\\\\Windows\\\\Fonts\\\\NanumGothic.ttf'), ('NanumBarunGothic', 'C:\\\\Windows\\\\Fonts\\\\NanumBarunGothicBold.ttf'), ('NanumSquareRound', 'C:\\\\WINDOWS\\\\Fonts\\\\NanumSquareRoundEB.ttf'), ('NanumMyeongjo', 'C:\\\\Windows\\\\Fonts\\\\NanumMyeongjoBold.ttf'), ('NanumGothic', 'C:\\\\WINDOWS\\\\Fonts\\\\NanumGothicExtraBold.ttf'), ('NanumBarunGothic', 'C:\\\\WINDOWS\\\\Fonts\\\\NanumBarunGothicUltraLight.ttf'), ('Nanum Brush Script', 'C:\\\\Windows\\\\Fonts\\\\NanumBrush.ttf'), ('NanumBarunGothicOTF', 'C:\\\\Windows\\\\Fonts\\\\NanumBarunGothic.otf'), ('NanumMyeongjo', 'C:\\\\Windows\\\\Fonts\\\\NanumMyeongjo.ttf'), ('NanumGothic', 'C:\\\\Windows\\\\Fonts\\\\NanumGothicBold.ttf'), ('NanumBarunGothicOTF', 'C:\\\\Windows\\\\Fonts\\\\NanumBarunGothicBold.otf'), ('NanumBarunGothicOTF', 'C:\\\\Windows\\\\Fonts\\\\NanumBarunGothicUltraLight.otf'), ('NanumBarunGothicOTF', 'C:\\\\WINDOWS\\\\Fonts\\\\NanumBarunGothicBold.otf'), ('NanumSquareRound', 'C:\\\\WINDOWS\\\\Fonts\\\\NanumSquareRoundL.ttf'), ('NanumBarunGothicOTF', 'C:\\\\WINDOWS\\\\Fonts\\\\NanumBarunGothic.otf'), ('NanumSquare', 'C:\\\\Windows\\\\Fonts\\\\NanumSquareR.ttf'), ('Nanum Pen Script', 'C:\\\\Windows\\\\Fonts\\\\NanumPen.ttf'), ('NanumBarunGothicOTF', 'C:\\\\WINDOWS\\\\Fonts\\\\NanumBarunGothicUltraLight.otf'), ('Nanum Pen Script', 'C:\\\\WINDOWS\\\\Fonts\\\\NanumPen.ttf'), ('NanumGothic', 'C:\\\\Windows\\\\Fonts\\\\NanumGothicLight.ttf'), ('NanumBarunGothic', 'C:\\\\Windows\\\\Fonts\\\\NanumBarunGothicLight.ttf'), ('D2Codingligature Nerd Font', 'C:\\\\Users\\\\junsokhuhh\\\\AppData\\\\Local\\\\Microsoft\\\\Windows\\\\Fonts\\\\D2Coding v.1.3.2 ligature Nerd Font Complete.ttf'), ('NanumSquareRound', 'C:\\\\Windows\\\\Fonts\\\\NanumSquareRoundL.ttf'), ('NanumBarunGothic', 'C:\\\\Windows\\\\Fonts\\\\NanumBarunGothicUltraLight.ttf'), ('NanumSquare', 'C:\\\\WINDOWS\\\\Fonts\\\\NanumSquareB.ttf'), ('NanumGothic', 'C:\\\\Windows\\\\Fonts\\\\NanumGothicExtraBold.ttf'), ('NanumMyeongjo', 'C:\\\\WINDOWS\\\\Fonts\\\\NanumMyeongjoExtraBold.ttf'), ('NanumSquareRound', 'C:\\\\Windows\\\\Fonts\\\\NanumSquareRoundB.ttf'), ('NanumSquare', 'C:\\\\Windows\\\\Fonts\\\\NanumSquareL.ttf'), ('Nanum Brush Script', 'C:\\\\WINDOWS\\\\Fonts\\\\NanumBrush.ttf'), ('NanumMyeongjo', 'C:\\\\Windows\\\\Fonts\\\\NanumMyeongjoExtraBold.ttf'), ('NanumBarunpen', 'C:\\\\WINDOWS\\\\Fonts\\\\NanumBarunpenB.ttf'), ('NanumBarunGothic', 'C:\\\\WINDOWS\\\\Fonts\\\\NanumBarunGothic.ttf'), ('NanumSquareRound', 'C:\\\\Windows\\\\Fonts\\\\NanumSquareRoundR.ttf'), ('NanumGothic', 'C:\\\\WINDOWS\\\\Fonts\\\\NanumGothicLight.ttf'), ('NanumSquare', 'C:\\\\WINDOWS\\\\Fonts\\\\NanumSquareL.ttf'), ('NanumSquareRound', 'C:\\\\WINDOWS\\\\Fonts\\\\NanumSquareRoundR.ttf'), ('NanumSquareRound', 'C:\\\\Windows\\\\Fonts\\\\NanumSquareRoundEB.ttf'), ('NanumGothic', 'C:\\\\WINDOWS\\\\Fonts\\\\NanumGothic.ttf'), ('NanumGothic', 'C:\\\\WINDOWS\\\\Fonts\\\\NanumGothicBold.ttf'), ('NanumSquare', 'C:\\\\Windows\\\\Fonts\\\\NanumSquareB.ttf'), ('NanumSquare', 'C:\\\\Windows\\\\Fonts\\\\NanumSquareEB.ttf'), ('D2Coding Nerd Font', 'C:\\\\Users\\\\junsokhuhh\\\\AppData\\\\Local\\\\Microsoft\\\\Windows\\\\Fonts\\\\D2Coding v.1.3.2 Nerd Font Complete.ttf'), ('NanumSquareRound', 'C:\\\\WINDOWS\\\\Fonts\\\\NanumSquareRoundB.ttf'), ('NanumBarunGothic', 'C:\\\\WINDOWS\\\\Fonts\\\\NanumBarunGothicLight.ttf'), ('NanumGothicCoding', 'C:\\\\Users\\\\junsokhuhh\\\\AppData\\\\Local\\\\Microsoft\\\\Windows\\\\Fonts\\\\NanumGothicCoding-Bold.ttf'), ('NanumBarunpen', 'C:\\\\Windows\\\\Fonts\\\\NanumBarunpenB.ttf'), ('NanumSquare', 'C:\\\\WINDOWS\\\\Fonts\\\\NanumSquareR.ttf'), ('NanumGothicCoding', 'C:\\\\Users\\\\junsokhuhh\\\\AppData\\\\Local\\\\Microsoft\\\\Windows\\\\Fonts\\\\NanumGothicCoding.ttf'), ('NanumBarunGothicOTF', 'C:\\\\Windows\\\\Fonts\\\\NanumBarunGothicLight.otf'), ('NanumBarunpen', 'C:\\\\Windows\\\\Fonts\\\\NanumBarunpenR.ttf'), ('NanumBarunGothicOTF', 'C:\\\\WINDOWS\\\\Fonts\\\\NanumBarunGothicLight.otf'), ('NanumMyeongjo', 'C:\\\\WINDOWS\\\\Fonts\\\\NanumMyeongjoBold.ttf'), ('NanumSquare', 'C:\\\\WINDOWS\\\\Fonts\\\\NanumSquareEB.ttf'), ('NanumBarunGothic', 'C:\\\\WINDOWS\\\\Fonts\\\\NanumBarunGothicBold.ttf'), ('NanumGothic', 'C:\\\\Users\\\\junsokhuhh\\\\Miniconda3\\\\envs\\\\for-quarto\\\\lib\\\\site-packages\\\\koreanize_matplotlib\\\\fonts\\\\NanumGothic.ttf')]\n```\n:::\n:::\n\n\n## 활용 \n\nmatplotlib에서 폰트를 활용하는 방법은 두 가지다. 하나는 폰트의 속성을 지정해놓고 해당 폰트가 활용될 때 이를 호출해서 쓰는 방법이고, 다른 하나는 전역적으로 해당 폰트를 기본 폰트로 지정하는 것이다. \n\n### 호출해서 활용\n\n아래 결과에서 보듯이, fontprop을 통해 지정된 폰트 양식을 그래프 요소에 적용해보자. \n\n::: {.cell layout='[-10,70,-10]' execution_count=5}\n``` {.python .cell-code}\nfontprop = fm.FontProperties(fname=font_path, size=15)\ndraw_sample(fontprop)\n```\n\n::: {.cell-output .cell-output-display}\n![](2022-12-04-matplotlib-korfont-redux_files/figure-html/cell-6-output-1.png){width=597 height=435}\n:::\n:::\n\n\n### 전역으로 활용\n\n폰트 속성을 전역으로 지정하고 그래프를 그려보자. \n\n::: {.cell layout='[-10,70,-10]' execution_count=6}\n``` {.python .cell-code}\n# rcParams 설정\nplt.rcParams[\"font.family\"] = 'D2 Coding Nerd'\nplt.rcParams['font.size'] = 15.\nplt.rcParams['xtick.labelsize'] = 12.\nplt.rcParams['ytick.labelsize'] = 12.\nplt.rcParams['axes.labelsize'] = 12.\nplt.rcParams['axes.unicode_minus'] = False\n\n# 그림 그리기 \ndraw_sample()\n```\n\n::: {.cell-output .cell-output-display}\n![](2022-12-04-matplotlib-korfont-redux_files/figure-html/cell-7-output-1.png){width=605 height=436}\n:::\n:::\n\n\n",
    "supporting": [
      "2022-12-04-matplotlib-korfont-redux_files\\figure-html"
    ],
    "filters": [],
    "includes": {}
  }
}