{
  "hash": "12e9cbfff6d702f4d8883d3d19d2fbe7",
  "result": {
    "markdown": "---\ntitle: \"Julia + VS Code\" \ndescription: Julia를 빠르게 찍먹해보자 \nauthor: \"JS HUHH\"\ndate: \"08/15/2023\"\nimage: \"./images/tools.jpg\"\ncategories: [computer-tool]\nfilters:\n   - lightbox\nlightbox: auto\n#jupyter: python3\ndraft: true\n---\n\n## TL; DR\nJulia를 빠르게 세팅하는 방법 (Windows/Macos)\n\n## 넋두리 \n생성 AI 덕분에 프로그래밍 언어가 필요없어진 시대라지만 이럴 수록 취미 삼아(?) 프로그래밍 언어를 배우기 좋은 시절이 아닌가 싶다. 평소 가장 뛰어난 하이레벨 컴퓨터 언어라고 생각해온 Julia를 윈도우와 Macos에서 빠르게 설치하고, VS Code에서 Jupyter를 통해 활용하는 방법을 소개한다. \n\n물론 이 소개 역시 정리할 내용을 망각할 미래의 나 놈을 위한 것이다!  \n\n## 설치 \n설치는 아래 공식 사이트에서 OS별로 다운로드 받아서 설치하면 된다. \n\n<https://julialang.org/>\n\n조금 특이하게 하고 싶다면, 윈도의 경우는 `wingret`을 맥의 경우에는 `brew`를 쓰면 되겠다. \n\n```shell\n> winget install --id=Julialang.Julia  -e # Windows PowerShell\n> brew install julia # Macos \n```\n\n## REPL 세팅  \n\nREPL이란 Read-Evalute-Print-Loop를 의미한다. 인간이 입력한 내용을 기계가 읽고 처리하고 이를 인쇄하는 순환을 의미하는데, 그냥 터미널 창이라고 생각하면 쉽다. \n\nMacos에서는 별다른 작업 없이 설치 후 터미널에서 바로 사용할 수 있다. \n\n#### For Windows \n\n우선 윈도에 설치하면 파워셸 등의 터미널에서 자동으로 인식이 되지 않는다. 별도의 전용 REPL을 제공하고 있지만 그냥 터미널 안에서 함께 쓰는 게 아무래도 편하다.\n\n그런데 줄리아 설치시 실행 파일의 경로에 버전이 따라 붙는다. 버전이 바뀔 때마다 경로(path)를 다시 지정해주어야 하는 불편함이 있다. \n\n익숙하지 않다면, [여기](https://toopyo.tistory.com/entry/Windows-environment-variable-path-pathext)를 참고하여 julia 관련 실행 파일이 담긴 폴더를 경로로 지정하면 된다. 이후 기본 셸에서 사용할 수 있다. \n\n## VS Code\n\nVS Code로 줄리아용 익스텐션을 부릴 수 있다. 다만, Julia Extension 대신 익숙한 Jupyter를 쓸 수 있다. 커널 지정시 적당한 줄리아 커널을 선택하면 그만이다. \n\n### OS 문제 \n\n그런데 한 가지 큰 문제가 있다. OS별로 경로 설정이 구분해서 되지 않는다. VS Code에서 줄리아 커널을 인식시키기 위해서는 경로 지정이 필요한데, 이게 OS 별로 다르다. \n\n만일 VS Code의 환경을 동기화해 놓고 쓴다면, 윈도우와 맥OS를 쓸 때마다 줄리아의 실행 경로가 매번 바뀌게 되어 실행 파일의 경로를 찾지 못했다는 메시지를 보게 된다. OS를 변경할 때마다 매번 경로를 지정해야 하는 불편이 뒤따른다. \n\n### 익스텐션으로 해결하자. \n\n다행스럽게도, VS 코드의 플랫폼 별 관리를 제어하는 확장이 있다. 이 녀석을 부리도록 하자. VS Code의 정식 기능으로 넣어도 좋을 듯 싶다. \n\n[Platform Settings](https://marketplace.visualstudio.com/items?itemName=runarsf.platform-settings)\n\n해당 패키지를 설치하고, `settings.json`을 수정하면 된다. 아래의 내용을 넣어주자. \n\n:::{.column-margin}\n`settings.json`을 띄우기 어렵다면 이렇게 하자. \n왼쪽 하단의 톱니 클릭 &rarr; 설정 &rarr; 찾기 창에 \"julia\" 아래 적당한 항목에서 `settings.json애서 편집` 선택\n:::\n\n```json\n\"platformSettings.platforms\": {\n  \"win32\": {\n    \"julia.executablePath\": \"C:/Users/사용자-계정-이름/AppData/Local/Programs/Julia-1.9.2/bin/julia.exe\"\n  },\n  \"darwin\": {\n    \"julia.executablePath\": \"/opt/homebrew/bin/julia\"\n  }\n```\n\n- 위에서 구체적인 경로를 각자의 환경에 맞게 바꿔야 한다. \n\n## Julia의 패키지 관리\n\n줄리아의 패키지 관리는 사실 매우 간단하다. Python의 복잡하고 다양한 방법에 비해 놀라운 정도로 간단해서 오히려 혼동될 지경이다. 줄리아 버전 및 패키지 버전 관리 전체를 줄리아에서 통일적으로 담당하며 제어도 굉장히 간단하다.\n\n전체적인 운용 방식은 최근 각광받은 Python의 Poetry 그리고 블로그에서 소개한 Rye와 유사하다. 다만 실행 바이너리와 패키지를 각 프로젝트 별로 모두 설치하지 않는다는 점에서 파이썬 가상 환경에 비해 낭비가 덜하다. \n\n### 프로젝트 개시 \n\n<https://pkgdocs.julialang.org/v1/environments/>\n\nREPL 창에서 `]`을 입력하면 패키지(Pkg) 모드로 진입한다. 만일 다시 줄리아 REPL 창으로 가고 싶으면 백스페이스를 누른다. \n\nPkg 창에서 여러가지를 할 수 있지만 일단 여기서는 프로젝트를 시작하는 방법을 알아보자. 아래 보는 것은 `tutorial` 프로젝트 개시를 예시한 것이다. 해당 폴더가 이미 있으면 그 안에 생성된다. \n```julia\n(@v1.8) pkg> activate tutorial\n  [ Info: activating new environment at `~/tutorial/Project.toml`.\n```\n\n위 창을 보자. `(@v1.8)` 현재 Pkg REPL이 바라보고 있는 폴더를 의미한다. 이는 디폴트 환경으로 해당 환경은 `\\Users\\{PC-아이디}\\.julia\\` 와 비슷한 폴더에 담긴 환경을 의미한다.\n\nJulia REPL에서 해당 폴더로 이동하고 싶다면,\n\n```{shell}\njulia> cd(\"C:\\\\가고싶은-폴더\") # 윈도우에서 \njulia> cd(\"C:\\가고싶은-폴더\") # Macos, Ubuntu \n```\n\n해당 폴더 안에서 환경을 액티베이트하고 싶다면,\n\n```{shell}\n(NEW) pkg> activate .\nActivating project at `D:\\GitHub\\{프로젝트-폴더}`\n(프로젝트-폴더) pkg> st\nStatus `C:\\프로젝트-폴더\\Project.toml`\n...\n```\n\n\n프로젝트의 개시와 함께 해당 폴더에 `Manifest.toml`, `Project.toml`이 생성된다. 두 파일에 용도에 대해서는 상세하게 다루지는 않겠다. Project.toml은 해당 폴더의 프로젝트를 진행하기 위한 패키지의 세목이 담겨 있다. 자세한 내용은 아래 링크를 참고하면 된다. \n\n<https://pkgdocs.julialang.org/v1/toml-files/>\n\n내가 생성한 환경 뿐 아니라 다른 사람이 만들어둔 환경을 가져와서 해당 환경과 동일한 환경을 구축할 수도 있다. 상세한 내용은 아래 링크를 참고하면 된다. \n\n<https://pkgdocs.julialang.org/v1/environments/>\n\n",
    "supporting": [
      "2023-08-15-julia-quicksilver_files"
    ],
    "filters": [],
    "includes": {}
  }
}