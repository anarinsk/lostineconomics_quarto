{
  "hash": "bb19ecc903ff7bac4692587474704447",
  "result": {
    "markdown": "---\ntitle: \"pixi\" \ndescription: 의존성 지옥을 벗어날 또 다른 방법 \nauthor: \"JS HUHH\"\ndate: \"08/27/2023\"\nimage: \"./images/pixi.webp\"\ncategories: [computer-tool]\nfilters:\n   - lightbox\n   #- line-highlight\nlightbox: auto\n#jupyter: python3\ndraft: false\nformat:\n  html:\n    code-line-numbers: true\n    highlight-style: arrow\n---\n\n## TL; DR\n의존성이라는 지옥을 벗어나보자. \n\n## 넋두리 \n심각한 프로젝트를 하지 않는다면 '의존성'이 문제가 되지 않을 수 있다. 하지만 습관을 잘 들여놓아야 심각한 상황이 왔을 때 대처가 가능한 법이다. 지난 번 소개했던 [RYE](https://www.lostineconomics.com/posts/computer-tool/2023-05-29-rye.html)와 유사한 의존성 관리 도구 pixi를 소개한다. 아직 극초기 프로젝트지만 개인 프로젝트인 RYE와 달리 pixi는 조금 더 체계적인 지원 체계를 갖출 듯 싶다. \n\n:::{.column-margin}\n개발팀은 Rust의 `cargo` 명령어를 지향한다고 하며, 언어를 가리지 않지만 의존성 지옥에 가장 취약할 python에서 누릴 수 있는 이득이 가장 클 것이라고 밝히고 있다. 혹시나 해서 julia를 태워 봤는데 지원되지 않았다. 현재로서 랭귀지 지원은 제한적인 듯 싶다. \n:::\n\n## 설치 \n\n<https://prefix.dev/docs/pixi/overview#installation>\n\nOS에 따라서 설치 방법이 제공된다. macos는 `brew`를 쓰는 것을 권장한다. \n\n```bash\nbrew install pixi # for Macos \niwr -useb https://pixi.sh/install.ps1 | iex # For PS of Win64\n```\n\n## 활용 \n\nRYE와 거의 비슷하다. \n\n- 환경을 프로젝트 폴더 안에 활성화한다. \n- 활용한 언어를 포함해서 필요한 패키지를 `add`한다. \n- 코딩한다. \n\npixi의 경우 다음과 같은 특징을 지닌다. \n\n- conda 환경을 따른다. \n- 별도의 셸 환경을 제공한다. \n\n예를 들어보자. 원하는 폴더에 파이썬 환경을 만들고 여기에 pandas와 plotly를 설치하고 싶다고 하자. 해당 폴더를 만들고 터미널을 통해 해당 폴더에 들어가자. \n\n```bash\n> pixi init .  # 폴더를 생성하고 싶다면 pixi init {프로젝트-이름}\n> pixi add python pandas plotly \n```\n\npixi가 필요한 패키지를 콘다 리포지터리에서 끌어와 설치한다. 만일 터미널에서 활용하고 싶다면 `pixi shell`을 치면 된다. `pixi`를 치면 필요한 명령어를 보여준다. \n\n## Multi platform \n\npixi의 장점은 os별로 구별해서 패키지를 관리할 수 있다는 것이다. 환경을 담고 있는 `pixi.toml`을 열어보면 이 점을 쉽게 알 수 있다.\n\n```toml\n[project]\n# Default project info....\n# A list of platforms you are supporting with your package.\nplatforms = [\"win-64\", \"linux-64\", \"osx-64\", \"osx-arm64\"]\n```\n\n`pixi.toml`을 열어보면 프로젝트의 메타 데이터로 플랫폼이 있다. 여기에 정의되어 있지 않은 환경에서 `.toml`에 정의된 패키지를 인스톨해보자. \n\n```bash\n❯ pixi install\n  × the project is not configured for your current platform\n   ╭─[pixi.toml:6:1]\n 6 │ channels = [\"conda-forge\"]\n 7 │ platforms = [\"osx-arm64\"]\n   ·             ────────────────┬────────────────\n   ·                             ╰── add 'win-64' here\n 8 │\n   ╰────\n  help: The project needs to be configured to support your platform (win-64).\n```\n\n아래와 같이 메시지를 띄워준다. `pixi.toml` 파일을 열어 해당 플랫폼을 추가한 후 다시 `pixi install`을 실행하면 된다. 만일 에러가 뜬다면 셸 창을 다시 실행하자. 플랫폼 별 의존성을 세밀하게 정의해 설치하거나 이를 `pixi.toml`에 지정할 수 있다. 자세한 것은 [여기](https://prefix.dev/docs/pixi/advanced/multi_platform_configuration)를 참고하도록 하자. \n\n### Example \n\n아마도 멀티플랫폼 지원이 pixi의 가장 큰 장점이 아닐까 싶다. pytorch를 인스톨하는 경우를 떠올려보자. 플랫폼A는 Windows + Nvidia GPU를 운용하며, 플랫폼B는 Silicon mac 기반의 macos이다. 하나의 `pixi.toml` 파일을 통해서 각기 다른 플랫폼에서 파이토치 프로젝트를 유지하는 것이 목표다. \n\n\n```{toml filename=\"pixi.toml\"}\n[project]\nname = \"pixi_pytorch\"\nversion = \"0.1.0\"\ndescription = \"Add a short description here\"\nauthors = [\"Junsok Huhh <anarinsk@gmail.com>\"]\nchannels = [\"conda-forge\", \"pytorch\", \"nvidia\"]\nplatforms = [\"win-64\", \"osx-arm64\"]\n\n[tasks]\n\n[target.win-64.dependencies]\npytorch-cuda = \"11.8.*\"\ntorchaudio = \"2.0.2.*\"\npytorch = \"2.0.1.*\"\ntorchvision = \"0.15.2.*\"\n\n[target.osx-arm64.dependencies]\npytorch = \"2.0.1.*\"\ntorchvision = \"0.15.2.*\"\n\n[dependencies]\nipykernel = \"6.25.1.*\"\n```\n\n\n\n\n## VS Code \n\nVS Code에서 `.ipynb`로 작업하고 싶다면 간단하다. 윈도의 경우 해당 폴더가 작업 폴더로 잡혀 있다면 커널 선택 시 `.pixi...` 아래 설치된 커널이 바로 선택가능할 것이다. 만일 그렇지 않다면 커널을 직접 선택해주면 된다. \n\n:::{.column-margin}\nVS Code에서 `파일` > `작업 영역에 폴더 추가`를 통해 작업 폴더를 지정할 수 있다. 터미널의 해당 폴더에서 `code .`을 실행해도 된다. \n:::\n\n:::{.callout-tip title=\"인터프리터 경로 설정\"}\n`F1` > `Python: 인터프리터 선택` > `+인터프리터 경로 입력...`\n:::\n\n해당 프로젝트 폴더 안에 `.pixi`로 가자. OS 별로 구별해서 파이썬 바이너리 혹은 스크립트를 선택하면 된다. \n\n- (macos) `.pixi/env/bin/pyhon`\n- (windows) `.pixi\\env\\python.exe`\n\n## References\n\n<https://prefix.dev/blog/launching_pixi>\n\n",
    "supporting": [
      "2023-08-27-pixi_files"
    ],
    "filters": [],
    "includes": {}
  }
}