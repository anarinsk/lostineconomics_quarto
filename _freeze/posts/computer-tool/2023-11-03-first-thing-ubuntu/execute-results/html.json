{
  "hash": "0580d08aeb33b12c4255d1afd592857d",
  "result": {
    "engine": "jupyter",
    "markdown": "---\ntitle: Ubuntu를 깔고 먼저 해야 할 일들\ndescription: 우분투 설치 후 이것부터!\nauthor: JS HUHH\ndate: 11/03/2023\nimage: ./images/ubuntu.png\ncategories:\n  - computer-tool\nfilters:\n  - lightbox\nlightbox: auto\ndraft: false\nformat:\n  html:\n    highlight-style: github\n    code-block-border-left: '#31BAE9'\n---\n\n## TL; DR\n우분투 설치하고 먼저 해야 할 일들을 정리해보자.   \n\n## 넋두리 \nWSL이 생기면서 윈도에서도 리눅스를 제대로 쓸 수 있게 되었다. 하는 김에 우분투 설치하고 (내 기준에서) 먼저 해야 할 일을 정리해보려 한다. 물론 이 포스트 역시 모든 걸 까먹을 미래의 나 놈 때문이다. \n\n## 터미널 \n\n보통 우분투를 설치하고 그 기기에 키보드와 마우스를 연결해서 쓰는 일은 드물지 않을까 싶다. WSL을 예로 들어 보자. 이는 윈도와 나란히 설치된 리눅스 서버에 윈도 안에서 접속해 활용하게 된다. 이렇게 다른 OS(Windows, Macos)에서 우분투 서버에 접속해서 쓸 때는 터미널 앱이 중요하다. 윈도에서는 윈도 터미널이 Macos에서는 iTerm2이 좋다. \n\n폰트 설정 역시 마찬가지다. 접속하는 OS에 취향껏 폰트를 설치하면 된다. HACK Nerd 폰트를 강추한다. \n\n:::{.column-margin}\n요즘은 여러가지 이모지가 많이 활용되는데, 이를 제대로 쓰려면 Nerd 계열의 폰트를 설치하자. Hack Nerd 폰트는 [여기](https://www.nerdfonts.com/font-downloads)서 다운로드하자. \n:::\n\n## 리포지토리 주소 변경 \n\n기본 리포지토리 주소를 바꾸도록 하자. 만일 WSL을 통해 설치했다면 우분투 메인 서버로 설정되어 있을 것이고, iso 이미지로 설치했다면, `kr`이 앞에 붙어 있다. apt 패키지 업데이트를 위한 주소는 `/etc/apt/sources.list` 파일을 직접 편집하면 된다. \n\n```zsh\n> sudo nano /etc/apt/sources.list\n```\n\n기본 저장소보다는 카카오의 미러 저장소가 국내에서 빠르다. 해당 파일을 적당한 편집기로 열어 기본 패키지 저장소가 어떻게 되어 있는지 살펴보자. 파일 내의 모든 저장소 URL을 찾아 `http://archive.ubuntu.com/ubuntu/` 또는 `http://kr.archive.ubuntu.com/ubuntu/` 등의 주소를 `http://mirror.kakao.com/ubuntu/`로 변경하면 된다. 둘 중 뭘로 되어 있는지 모르니 확인 후 작업하는 것을 권한다. nano 앱에서 `crtl-w` `>`  `crtl-r`로 찾아서 바꾸자.  \n\n## zsh 관련 설치 \n\n```zsh\n> sudo apt update # 이미 실행했다면 건너 뛰자 \n> sudo apt install zsh # zsh 설치\n> chsh -s $(which zsh) # zsh을 기본 셸로 설정\n\n# 로그아웃 후에 다시 로그인하면 zsh이 기본셸로 설정된다. \n> sh -c \"$(curl -fsSL https://raw.githubusercontent.com/ohmyzsh/ohmyzsh/master/tools/install.sh)\" # oh my zsh을 설치하자. \n```\n\n## powerlevel10k(p10k) 깔기 \n\n```zsh\n> git clone --depth=1 https://github.com/romkatv/powerlevel10k.git ${ZSH_CUSTOM:-$HOME/.oh-my-zsh/custom}/themes/powerlevel10k\n```\n\n셸 꾸미기로 속 편하게 파워레벨10k를 쓰자. \n\n```zsh\n> nano ~/.zshrc # zsh 설정 열기 \n# ZSH_THEME=\"robbyrussell\" -> ZSH_THEME=\"powerlevel10k/powerlevel10k\" # 테마를 p10k로 바꾸자 \n```\n\n변경 후 셸을 다시 시작하면 p10k 설정화면이 뜬다. 취향대로 설정하도록 하자. 설정을 바꾸고 싶다면, `p10k configure`를 실행하거나 `~/.p10k.zsh`를 직접 수정해도 좋다. \n\n### brew 설치 \n\n우분투에서 필요한 앱을 까는 방법은 apt, snap 그리고 brew가 있다. OS 단위의 업데이트 혹은 OS와 프로세스과 깊게 연관된 앱들은 apt를 통해서 깔자. snap도 나쁘지는 않지만 번거로운 면이 있다. user 레벨에서 필요한 앱들을 깔고 관리하기에는 brew가 좋다. Macos 만큼 편하지는 않지만 리눅스에서도 제법 쓸만하다. \n\n<https://brew.sh/>\n\n웹 페이지의 소개된 방식대로 설치하자. 설치 후에는 화면에 뜬 메시지대로 셸의 종류에 따른 사후 작업이 필요하다. `.zshrc`에 여러가지 경로를 넣어 주는 작업이다. 그래야 brew 명령어를 제대로 실행할 수 있다. \n\n### gh, pixi with brew \n\n이제 brew를 통해서 필요한 앱들을 깔겠다. 필요한 앱을 알아서 깔면 된다. brew를 통해서 설치할 수 있는지 여부는 brew 홈페이지에서 검색으로 확인할 수 있다. 나는 깃헙을 활용하기 위한 gh와 파이썬 의존성 관리도구인 pixi를 가장 먼저 설치했다. \n\n```zsh\n> brew install gh, pixi \n```\n\ngh를 설치한 후 `gh auth login`을 통해 깃헙 계정에 로그인을 해두자. 필요한 리포가 있을 경우 `gh repo clone {리포-주소}`를 통해 편하게 당겨올 수 있다. \n\n## Non-brew\n\nbrew로 다 설치가 되면 좋겠지만 그렇지 않은 앱들도 있다. 아래 앱들은 직접 설치해야 한다. \n\n### Miniforge \n\nMiniforge는 패키지 관리 도구이자 독립적인 가상 환경을 제공하는 miniconda의 오픈소스 버전이다. Macos에서는 brew를 통해 설치되지만 아쉽게도 리눅스에서는 별도로 설치해야 한다. pixi를 쓴다면 다른 가상 환경은 필요하지 않다. 다만 다른 프로그램이 conda에 의존할 경우 필요할 수 있다. \n\n```zsh\n> curl -L -O \"https://github.com/conda-forge/miniforge/releases/latest/download/Miniforge3-$(uname)-$(uname -m).sh\"\nbash Miniforge3-$(uname)-$(uname -m).sh\n```\n\n삭제를 비롯한 보다 자세한 사항은 아래 링크를 참고하자.\n\n🔗 [miniforge](https://github.com/conda-forge/miniforge)\n\n### Quarto \n\n문서 작성에 필수 도구인 Quarto의 경우 우분투에서는 brew를 통해 설치할 수 없다. \n\n🔗 [Linux에 Quarto 설치하기](https://docs.posit.co/resources/install-quarto/#__tabbed_1_2)\n\n`.deb` 확장자 파일을 다운받아서 gdebi 앱을 통해서 설치하는 방식이다. \n\n```zsh\n> sudo curl -LO https://quarto.org/download/latest/quarto-linux-amd64.deb #deb 다운로드 \n> sudo apt-get install gdebi-core\n> sudo gdebi quarto-linux-amd64.deb\n```\n\n### Mojo \n\nUbuntu 22.04 LTS와 VS Code + Mojo Extension을 활용한다고 가정하자. \n\n```zsh\n> curl https://get.modular.com | sh - && \\\n  modular auth mut_c4e7186420c84b86b1f7b5219b4028d9\n> modular install mojo\n> code .\n```\n\nmojo의 경우 파이썬과 운용할 일이 많은데 파이썬 가상 환경을 별도로 설정할 수 있다. 아래 링크를 참고하자. \n\n🔗 [mojo 설치 및 파이썬 환경 운용](https://github.com/anarinsk/setup_mojo)\n\n## 활용 \n\n1. 윈도 터미널에서 WSL에 접근한 뒤 작업 폴더로 가자. \n2. `code .`을 실행하자. 이 명령어를 실행하면 해당 폴더 아래에서 윈도의 VS Code가 실행된다. \n3. VS Code는 윈도 앱이다. UI등 윈도의 모든 편리함을 그대로 누리면 된다. \n\n",
    "supporting": [
      "2023-11-03-first-thing-ubuntu_files"
    ],
    "filters": [],
    "includes": {}
  }
}