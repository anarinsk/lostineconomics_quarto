---
title: "윈도 작업 환경을 기록한다" 
description: 네이티브와 WSL의 콜래버    
author: "JS HUHH"
date: "11/03/2023"
image: "./images/codespaces.webp"
categories: [computer-tool]
#fig-align: center
filters:
   - lightbox
   #- line-highlight
lightbox: auto
#jupyter: python3
draft: true
format:
  html:
    code-line-numbers: true
    highlight-style: arrow
---

## TL; DR
윈도우 작업 환경을 만드는 방법을 기록한다. 내용은 조금씩 변해갈 것이다.  

## 넋두리 
앞서 윈도에 관한 여러 포스트를 게재했다. 그런데 그 내용 중에서 이제는 쓰지 않는 것도 있다. 이 글은 '현재'를 바라보면서 윈도에서 어떤 작업환경을 유지하고 있는지를 기록하는 내용이다. 

## 앱 설치 관리자 

https://apps.microsoft.com/detail/9NBLGGH4NNS1?hl=ko-kr&gl=KR

winget으로 소프트웨어를 설치하고 관리하려면 "마이크로소프트 스토어"에서 앱설치 관리자를 설치하자. 꼭 winget을 깔아야 하는 것은 아니지만, 터미널에서 일관되게 관리할 수 있어서 꽤 편리하다. 

winget으로 설치할 수 있는 소프트웨어 확인은 아래 웹 사이트를 참고하자. 

https://winget.run/

```
> winget install -e --id Microsoft.PowerToys # 키보드 리매핑
> winget install -e --id Microsoft.PowerShell
> winget install -e --id GitHub.GitHubDesktop
> winget install -e --id Microsoft.VisualStudioCode
```

## 터미널 

터미널 앱은 당연히 윈도 터미널을 써야 한다. 다른 OS의 터미널 앱과 비교해도 이 만큼 편리하고 다재다능한 앱이 없다. 최근 윈도11 버전에는 기본으로 탑재가 되어 있다. 몇 가지 팁만 짚고 넘어가자. 

- Font는 Hack Nerd Font를 쓰자. 여기서 다운받자. 
- 최근 버전에서는 `json`을 고치지 않고도 설정을 쉽게 바꿀 수 있다. 여기서 테마, 폰트 등을 바꾸면 된다. 
- 셸 전체 설정과 개별 셸 설정 모두 가능하다. 

## WSL 

윈도에서 개발 환경은 WSL을 쓰도록 하자. 네이티브 개발 환경도 어느 정도 까지는 나쁘지 않다. 하지만 아래와 같은 이유로 WSL을 쓰는 편이 낫다고 본다. 

- 윈도의 레거시 요소(인코딩) 등이 방해하는 경우가 제법 있다.  
- WSL이 원본에 가까운 리눅스 환경을 제공한다. 여전히 많은 개발 환경들이 리눅스 기반으로 개발된다. 좋은 리눅스 환경이 있는데 쓰지 않을 이유가 있을까? 

리눅스를 개발환경으로 쓴다고 해서 그 불편함까지 감수해야 하는 것은 아니다. 네이티브 환경의 UI/UX 및 필요한 앱들은 그대로 활용하면 된다. VS Code룰 통해 리눅스 환경에 원격 접속해 편리하게 코딩을 할 수 있고, 윈도 탐색기에서 리눅스 OS 안의 폴더로 접근할 수도 있다.

### 설치 

아래 명령어를 통해서 WSL 기능을 활성화하고 Ubuntu 배포판을 설치할 수 있다. 

```shell
> wsl --install
```

디폴트 배포판을 바꾸는 법, 배포판을 삭제하는 방법 등은 아래 링크를 참고하자. 

https://learn.microsoft.com/en-us/windows/wsl/install

## Ubuntu 관리 

### 리포지토리 주소 변경 

기본 리포지토리 주소를 바꾸도록 하자. 만일 WSL을 통해 설치했다면 우분투 메인 서버로 설정되어 있을 것이다. apt 패키지 업데이트를 위한 주소는 `/etc/apt/sources.list` 파일을 편집하면 된다. 

```bash
> sudo nano /etc/apt/sources.list
```

기본 저장소보다는 카카오의 미러 저장소가 국내에서 빠르다. 해당 파일을 적당한 편집기로 열어 기본 패키지 저장소가 어떻게 되어 있는지 살펴보자. 파일 내의 모든 저장소 URL을 찾아 `http://archive.ubuntu.com/ubuntu/` 또는 `http://kr.archive.ubuntu.com/ubuntu/` 등의 주소를 `http://mirror.kakao.com/ubuntu/`로 변경하면 된다. 둘 중 뭘로 되어 있는지 모르니 확인 후 작업하는 것을 권한다. nano 앱에서 `crtl-w > crtl-r`로 찾아서 바꾸자.  

### zsh 설치 

```bash
> sudo apt update # 이미 실행했다면 건너 뛰자 
> sudo apt install zsh # zsh 설치
> chsh -s $(which zsh) # zsh을 기본 셸로 설정

# 로그아웃 후에 다시 로그인하면 zsh이 기본셸로 설정된다. 
> sh -c "$(curl -fsSL https://raw.githubusercontent.com/ohmyzsh/ohmyzsh/master/tools/install.sh)" # oh my zsh을 설치하자. 
```

### p10k 깔기 

```bash
> git clone --depth=1 https://github.com/romkatv/powerlevel10k.git ${ZSH_CUSTOM:-$HOME/.oh-my-zsh/custom}/themes/powerlevel10k
```

셸 꾸미기로 속 편하게 파워레벨10k를 쓰자. 

```bash
> nano ~/.zshrc # zsh 설정 열기 
# ZSH_THEME="robbyrussell" -> ZSH_THEME="powerlevel10k/powerlevel10k" # 테마를 p10k로 바꾸자 
```

변경 후 셸을 다시 시작하면 p10k 설정화면이 뜬다. 취향대로 설정하도록 하자. 설정을 바꾸고 싶다면, `p10k configure`를 실행하거나 `~/.p10k.zsh`를 직접 수정해도 좋다. 

### brew 설치 

우분투에서 필요한 앱을 까는 방법은 apt, snap 그리고 brew가 있다. OS 단위의 업데이트 혹은 OS와 프로세스과 깊게 연관된 앱들은 apt를 통해서 깔자. snap도 나쁘지는 않지만 거추장스런 면이 있다. user 레벨에서 필요한 앱들을 깔고 관리하기에는 brew가 편하다. macos 만큼 편하지는 않지만 리눅스에서도 쓸만하다. 

<https://brew.sh/>

웹 페이지의 소개된 방식대로 설치하자. 설치 후에는 화면에 뜬 메시지대로 사후 작업을 꼭 해줘야 한다. 그래야 brew 명령어를 제대로 실행할 수 있다. 사용하는 셸에 따라서 서로 다른 사후 실행 명령이 등장하니 유의하시라. 

### gh, pixi with brew 

이제 brew를 통해서 필요한 앱들을 깔겠다. 필요한 앱을 알아서 깔면 된다. brew를 통해서 설치할 수 있는지 여부는 brew 홈페이지에서 검색으로 확인할 수 있다. 나는 깃헙을 활용하기 위한 gh와 파이썬 의존성 관리도구인 pixi를 가장 먼저 설치했다. 

```bash
> brew install gh, pixi 
```

gh를 설치한 후 `gh auth login`을 통해 깃헙 계정에 로그인을 해두자. 필요한 리포가 있을 경우 `gh repo clone {리포-주소}`를 통해 편하게 당겨올 수 있다. 

## Linux 앱 


