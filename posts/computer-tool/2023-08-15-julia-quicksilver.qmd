---
title: "Julia + VS Code" 
description: Julia를 빠르게 찍먹해보자 
author: "JS HUHH"
date: "08/15/2023"
image: "./images/tools.jpg"
categories: [computer-tool]
filters:
   - lightbox
lightbox: auto
#jupyter: python3
draft: false
---

## TL; DR
Julia를 빠르게 세팅하는 방법 (Windows/Macos)

## 넋두리 
생성 AI 덕분에 프로그래밍 언어가 필요없어진 시대라지만 이럴 수록 취미 삼아(?) 프로그래밍 언어를 배우기 좋은 시절이 아닐까? 평소 가장 뛰어난 high-level 컴퓨터 언어라고 생각해온 Julia를 윈도와 Macos에서 빠르게 설치하고, VS Code에서 Jupyter를 통해 활용하는 방법을 소개한다. 

물론 이 소개 역시 정리할 내용을 망각할 미래의 나 놈을 위한 것이다!  

## 설치 
설치는 아래 공식 사이트에서 OS별로 다운로드 받아서 설치하면 된다. 

<https://julialang.org/>

조금 특이하게 하고 싶다면, 윈도의 경우는 `wingret`을 맥의 경우에는 `brew`를 쓰면 되겠다. 

```bash
> winget install --id=Julialang.Julia  -e # For Windows PowerShell
> brew install julia # For Macos 
```

## REPL 세팅  

REPL이란 Read-Evalute-Print Loop를 의미한다. 인간이 입력한 내용을 기계가 읽고 처리하고 이를 인쇄하는 순환을 의미하는데, 그냥 프로그래밍 언어와 소통하기 위한 터미널 창이라고 생각하면 된다. 

Macos에서는 별다른 작업 없이 설치 후 터미널에서 바로 사용할 수 있다. 

#### For Windows 

우선 윈도에 설치하면 파워셸 등의 터미널에서 자동으로 인식이 되지 않는다. 별도의 전용 REPL을 제공하고 있지만 그냥 터미널 안에서 함께 쓰는 게 아무래도 편하다. 이를 위해서는 Julia 실행 파일의 경로를 지정해주면 된다. 

:::{.column-margin}
Julia를 포함해 윈도용으로 제공되는 git 등이 호환성을 위해서 별도의 터미널 앱을 제공하지만, 윈도우11+윈도터미널을 쓰는 환경에서는 그냥 그 안에서 쓰는 게 제일 편리하다. 이 경우 해당 앱의 실행 파일의 위치를 경로로 잡아주면 터미널 내에서 쉽게 쓸 수 있다. 
:::

그런데 줄리아 설치시 실행 파일의 경로에 버전이 따라 붙는다. 버전이 바뀔 때마다 경로(path)를 다시 지정해주어야 하는 불편함이 있다. 

익숙하지 않다면, [여기](https://toopyo.tistory.com/entry/Windows-environment-variable-path-pathext)를 참고하여 julia 관련 실행 파일이 담긴 폴더를 경로로 지정하면 된다. 이후 기본 셸에서 사용할 수 있다. 

## VS Code

VS Code는 줄리아용 익스텐션을 제공하고 있다. 다만 이 익스텐션 대신 익숙한 Jupyter를 쓸 수 있다. Jupyter에서 커널로 Julia를 선택하면 된다. 

### OS 문제 

익스텐션을 쓰든 Jupyter를 쓰든 VS Code에서 줄리아를 쓸 때 한 가지 문제가 있다. OS별로 경로 설정을 구분해서 지정할 수 없다. VS Code에서 줄리아 커널을 인식시키기 위해서는 줄리아 실행 파일의 경로 지정이 필요한데, 이게 당연히 OS 별로 다르다. 

VS Code의 환경을 동기화해 놓고 윈도우와 맥OS를 번갈아 가며 쓴다면,  OS를 바꿀 때마다 줄리아의 실행 경로를 찾지 못했다는 메시지를 보게 된다. OS를 변경할 때마다 매번 경로를 지정해야 하는 불편을 감수해야 한다. 

### 역시 익스텐션으로 해결하자. 

다행스럽게도 VS 코드의 플랫폼 별 관리를 제어하는 확장이 있다. 이 녀석을 부리도록 하자. VS Code의 정식 기능으로 넣어도 좋을 듯 싶다. 

[VS Code Extension: Platform Settings](https://marketplace.visualstudio.com/items?itemName=runarsf.platform-settings)

해당 패키지를 설치하고, `settings.json`을 수정하면 된다. 아래의 내용을 넣어주자. 

:::{.column-margin}
`settings.json`을 띄우기 어렵다면 이렇게 하자. 
왼쪽 하단의 톱니 클릭 &rarr; 설정 &rarr; 찾기 창에 "julia" 아래 적당한 항목에서 `settings.json애서 편집` 선택
:::

```json
"platformSettings.platforms": {
  "win32": {
    "julia.executablePath": "C:/Users/사용자-계정-이름/AppData/Local/Programs/Julia-1.9.2/bin/julia.exe"
  },
  "darwin": {
    "julia.executablePath": "/opt/homebrew/bin/julia"
  }
```

- 위에서 구체적인 경로를 각자의 환경에 맞게 바꿔야 한다. 

## Julia의 패키지 관리

줄리아의 패키지 관리는 정말 간단하다. Python의 복잡하고 다양한 방법과 비교하면, 줄리아의 관리 방법은 간단해서 오히려 헛갈릴 정도이다. 

전체적인 패키지 운용 방식은 최근 각광받은 Python의 Poetry 그리고 이 블로그에서 소개한 [Rye](https://rye-up.com/)와 유사하다. 다만 실행을 위한 버전 특화된 바이너리와 패키지를 각 프로젝트 별로 따로 설치하지 않는다는 점에서 파이썬 가상 환경에 비해 낭비가 덜한 형태이다. 

### 프로젝트 개시 

<https://pkgdocs.julialang.org/v1/environments/>

REPL 창에서 `]`을 입력하면 패키지(Pkg) 모드로 진입한다. 줄리아는 자체적인 인터페이스로 패키지를 관리한다. 만일 다시 줄리아 REPL 모드로 가고 싶으면 백스페이스를 누른다. 

Pkg 창에서 여러가지를 할 수 있지만 일단 여기서는 프로젝트를 시작하는 방법을 알아보자. 아래 보는 것은 `tutorial` 프로젝트 개시를 예시한 것이다. 해당 폴더가 이미 있으면 그 안에 생성된다. 

```julia
(@v1.8) pkg> activate tutorial
  [ Info: activating new environment at `~/tutorial/Project.toml`.
```

최초로 패키지 모드에 진입하면 위와 유사한 터미널 창을 보게 된다. `(@v1.8)` 현재 Pkg REPL이 바라보고 있는 **환경**을 의미한다. 이는 디폴트 환경으로 해당 환경은 `\Users\{PC-아이디}\.julia\` 혹은 이와 유사한 줄리아 디폴트 공유 환경을 바라보게 된다.

Julia REPL에서 해당 폴더로 이동하고 싶다면,

```julia
julia> cd("C:\\가고싶은-폴더") # 윈도우에서 
julia> cd("C:\가고싶은-폴더") # Macos, Ubuntu 
```

해당 폴더 안에서 환경을 액티베이트하고 싶다면,

```julia
(@v1.8) pkg> activate .
Activating project at `D:\GitHub\{프로젝트-폴더}`
(프로젝트-폴더) pkg> st
Status `C:\프로젝트-폴더\Project.toml`
...
```
위에 보는 것처럼 내가 시작한 프로젝트 폴더를 바라보고 있다는 점을 분명히 알 수 있다. 프로젝트의 개시와 함께 해당 폴더에 `Manifest.toml`, `Project.toml`이 생성된다. 두 파일에 용도에 대해서는 상세하게 다루지는 않겠다. `Manifest.toml`는 해당 폴더의 프로젝트를 진행하기 위한 패키지의 세목(버전, 의존성 등)이 담겨 있다. `Project.toml`은 프로젝트의 메타 데이터를 담고 있다. 자세한 내용은 아래 링크를 참고하자. 

<https://pkgdocs.julialang.org/v1/toml-files/>

내가 생성한 환경 뿐 아니라 다른 사람이 만들어둔 환경을 가져와서 해당 환경과 동일한 환경을 구축할 수 있다. 상세한 내용은 아래 링크를 참고하자. 특히 다른 실행 환경을 가져와 그대로 재현할 수 있는 대목은 Julia 가상 환경의 큰 장점 중 하나이다.  

<https://pkgdocs.julialang.org/v1/environments/>