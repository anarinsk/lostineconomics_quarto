---
title: "pixi" 
description: 의존성 지옥을 벗어날 또 다른 방법 
author: "JS HUHH"
date: "08/27/2023"
image: "./images/pixi.webp"
categories: [computer-tool]
filters:
   - lightbox
   #- line-highlight
lightbox: auto
#jupyter: python3
draft: false
format:
  html:
    code-line-numbers: true
    highlight-style: arrow
---

## TL; DR
의존성이라는 지옥을 벗어나보자. 

## 넋두리 
심각한 프로젝트를 하지 않는다면 '의존성'이 문제가 되지 않을 수 있다. 하지만 습관을 잘 들여놓아야 심각한 상황이 왔을 때 대처가 가능한 법이다. 지난 번 소개했던 RYE와 유사한 의존성 관리 도구 pixi를 소개한다. 아직 극초기 프로젝트지만 개인 프로젝트인 RYE와 달리 pixi는 조금 더 체계적인 지원 체계를 갖출 듯 싶다. 

## 설치 

<https://prefix.dev/docs/pixi/overview#installation>

OS에 따라서 설치 방법이 제공된다. macos는 `brew`를 쓰는 것을 권장한다. 

```bash
brew install pixi # for Macos 
iwr -useb https://pixi.sh/install.ps1 | iex # For PS of Win64
```

## 활용 

RYE와 거의 비슷하다. 

- 환경을 프로젝트 폴더 안에 활성화한다. 
- 활용한 언어를 포함해서 필요한 패키지를 `add`한다. 
- 코딩한다. 

pixi의 경우 다음과 같은 특징을 지닌다. 

- conda 환경을 따른다. 
- 별도의 셸 환경을 제공한다. 

예를 들어보자. 원하는 폴더에 파이썬 환경을 만들고 여기에 pandas와 plotly를 설치하고 싶다고 하자. 해당 폴더를 만들고 터미널을 통해 해당 폴더에 들어가자. 

```bash
> pixi init .  # 폴더를 생성하고 싶다면 pixi init {프로젝트-이름}
> pixi add python pandas plotly 
```

pixi가 필요한 패키지를 콘다 리포지터리에서 끌어와 설치한다. 만일 터미널에서 활용하고 싶다면 `pixi shell`을 치면 된다. `pixi`를 치면 필요한 명령어를 보여준다. 

## Multi platform 

pixi의 장점은 os별로 구별해서 패키지를 관리할 수 있다는 것이다. 환경을 담고 있는 `pixi.toml`을 열어보면 이 점을 쉽게 알 수 있다.

```toml
[project]
# Default project info....
# A list of platforms you are supporting with your package.
platforms = ["win-64", "linux-64", "osx-64", "osx-arm64"]
```

`pixi.toml`을 열어보면 프로젝트의 메타 데이터로 플랫폼이 있다. 여기에 정의되어 있지 않은 환경에서 `.toml`에 정의된 패키지를 인스톨해보자. 

```bash
❯ pixi install
  × the project is not configured for your current platform
   ╭─[pixi.toml:6:1]
 6 │ channels = ["conda-forge"]
 7 │ platforms = ["osx-arm64"]
   ·             ────────────────┬────────────────
   ·                             ╰── add 'win-64' here
 8 │
   ╰────
  help: The project needs to be configured to support your platform (win-64).
```

아래와 같이 메시지를 띄워준다. `pixi.toml` 파일을 열어 해당 플랫폼을 추가한 후 다시 `pixi install`을 실행하면 된다. 만일 에러가 뜬다면 셸 창을 다시 실행하자. 플랫폼 별 의존성을 세밀하게 정의해 설치하거나 이를 `pixi.toml`에 지정할 수 있다. 자세한 것은 [여기](https://prefix.dev/docs/pixi/advanced/multi_platform_configuration)를 참고하도록 하자. 

## VS Code 

VS Code에서 `.ipynb`로 작업하고 싶다면 간단하다. 해당 폴더가 작업 폴더로 잡혀 있다면, 아마도 `.pixi...` 아래 커널이 선택가능할 것이다. 그렇지 않다면 커널을 직접 선택해주면 된다. 

:::{.column-margin}
VS Code에서 `파일` > `작업 영역에 폴더 추가`를 통해 작업 폴더를 지정할 수 있다. 터미널의 해당 폴더에서 `code .`을 실행해도 된다. 
:::

:::{.callout-tip}
`F1` > `Python: 인터프리터 선택` > `+인터프리터 경로 입력...`
:::

해당 프로젝트 폴더 안에 `.pixi`로 가자. OS 별로 구별해서 파이썬 바이너리 혹은 스크립트를 선택하면 된다. 

- (macos) `.pixi/env/bin/pyhon`
- (windows) `.pixi\env\python.exe`

## References

<https://prefix.dev/blog/launching_pixi>
