---
title: "pixi" 
description: 의존성 지옥을 벗어날 또 다른 방법 
author: "JS HUHH"
date: "08/27/2023"
image: "./images/pixi.webp"
categories: [computer-tool]
filters:
   - lightbox
   #- line-highlight
lightbox: auto
#jupyter: python3
draft: false
format:
  html:
    code-line-numbers: true
    highlight-style: arrow
---

## TL; DR
의존성이라는 지옥을 벗어나보자. 

## 넋두리 
심각한 프로젝트를 하지 않는다면 '의존성'이 문제가 되지 않을 수 있다. 하지만 습관을 잘 들여놓아야 심각한 상황이 왔을 때 대처가 가능한 법이다. 지난 번 소개했던 [Rye](https://www.lostineconomics.com/posts/computer-tool/2023-05-29-rye.html)와 유사한 의존성 관리 도구 pixi를 소개한다. 아직 초기 프로젝트지만 개인 프로젝트인 Rye와 달리 pixi는 조금 더 체계적인 지원 체계를 갖출 듯 싶다. OS 플랫폼 별로 별도의 의존성 등을 할당할 수 있는 대목이 가장 마음에 들었다. 

파이썬을 위한 많은 의존성 관리 도구가 있지만 선택이 간단하지는 않다. 일단 많은 도구가 OS를 탄다. 그리고 의존성 관리에 필수적인 가상 환경에도 (안타깝지만) '대세'가 없다. 이렇다보니 조합이 이래저래 복잡해진다. 본격적으로 쓰려면 [Poetry](https://python-poetry.org/) 같은 녀석을 부려야 하겠지만, 내가 타협할 수 있는 (문과적 수준의) 선택지가 있었으면 했다. Rye와 pixi가 딱 그 용도로 적합하다.  

:::{.column-margin}
개발팀은 Rust의 `cargo` 명령어를 지향한다고 하며, 언어를 가리지 않지만 의존성 지옥에 가장 취약할 python에서 누릴 수 있는 이득이 가장 클 것이라고 밝히고 있다. 혹시나 해서 julia를 태워 봤는데 지원되지 않았는데, conda-forge를 통해서 지원되는 julia는 intel macos와 linux 뿐이었다. 현재로서 랭귀지 지원은 conda 채널에 종속되어 있다.  
:::

## 설치 

<https://prefix.dev/docs/pixi/overview#installation>

OS에 따라서 설치 방법이 제공된다. macos는 `brew`를 쓰는 것을 권장한다. 

```bash
brew install pixi # for Macos 
iwr -useb https://pixi.sh/install.ps1 | iex # For Windows PowerShell
```

## 활용 

Rye와 거의 비슷하다. 

- 환경을 프로젝트 폴더 안에 활성화한다. 
- 활용한 언어를 포함해서 필요한 패키지를 `add`한다. 
- 코딩한다. 

:::{.column-margin}
Rye든 pixi든 사실 문법 자체는 대체로 Poetry를 따르고 있다.  
:::

pixi의 경우 다음과 같은 특징을 지닌다. 

- conda 환경을 따른다. 
- 별도의 셸 환경을 제공한다. 

예를 들어보자. 원하는 폴더에 파이썬 환경을 만들고 여기에 pandas와 plotly를 설치하고 싶다고 하자. 해당 폴더를 만들고 터미널을 통해 해당 폴더에 들어가자. 

```bash
> pixi init .  # 폴더를 생성하고 싶다면 pixi init {프로젝트-이름}
> pixi add python pandas plotly 
```

pixi가 필요한 패키지를 콘다 리포지터리에서 끌어와 설치한다. 만일 터미널에서 활용하고 싶다면 `pixi shell`을 치면 된다. `pixi`를 치면 필요한 명령어를 보여준다. 

## Multi platform 

pixi의 장점은 os별로 구별해서 패키지를 관리할 수 있다는 것이다. 환경을 담고 있는 `pixi.toml`을 열어보면 이 점을 쉽게 알 수 있다.

```toml
[project]
# Default project info....
# A list of platforms you are supporting with your package.
platforms = ["win-64", "linux-64", "osx-64", "osx-arm64"]
```

`pixi.toml`을 열어보면 프로젝트의 메타 데이터로 플랫폼이 있다. 여기에 정의되어 있지 않은 환경에서 `.toml`에 정의된 패키지를 인스톨해보자. 

```bash
❯ pixi install
  × the project is not configured for your current platform
   ╭─[pixi.toml:6:1]
 6 │ channels = ["conda-forge"]
 7 │ platforms = ["osx-arm64"]
   ·             ────────────────┬────────────────
   ·                             ╰── add 'win-64' here
 8 │
   ╰────
  help: The project needs to be configured to support your platform (win-64).
```

이렇게 메시지를 띄워준다. `pixi.toml` 파일을 열어 해당 플랫폼을 추가한 후 다시 `pixi install`을 실행하면 된다. 만일 에러가 뜬다면 셸 창을 다시 실행하자. 플랫폼 별 의존성을 세밀하게 정의해 설치하거나 이를 `pixi.toml`에 지정할 수 있다. 바로 이어서 살펴볼 것이다. 

:::{.column-margin}
자세한 것은 [여기](https://prefix.dev/docs/pixi/advanced/multi_platform_configuration)를 참고하도록 하자. 
:::

GitHub를 통해 여러 플랫폼에서 코드를 반복 사용하는 경우를 생각해보자. `.pixi/env` 아래 폴더에 바이너리 및 패키지가 저장된다. 만일 GitHub를 통해 `.ignore`를 설정했다면 `env` 아래 폴더가 모두 무시되므로 플랫폼 별로 다른 바이너리가 GitHub로 동기화되지는 않는다. 

### Example 

아마도 멀티플랫폼 지원이 pixi의 가장 큰 장점이 아닐까 싶다. pytorch를 인스톨하는 경우를 떠올려보자. 

- 플랫폼A: Windows + Nvidia GPU 
- 플랫폼B: macos + Silicon mac 

하나의 `pixi.toml` 파일을 통해서 각기 다른 플랫폼에서 파이토치 프로젝트를 유지하는 것이 목표이다. 특히 플랫폼A에서는 cuda를 활용할 예정이다. 

```{.toml filename="pixi.toml"}
[project]
name = "pixi_pytorch"
version = "0.1.0"
description = "Add a short description here"
authors = ["Junsok Huhh <anarinsk@gmail.com>"]
channels = ["conda-forge", "pytorch", "nvidia"]
platforms = ["win-64", "osx-arm64"]

[tasks]

[target.win-64.dependencies]
pytorch-cuda = "11.8.*"
torchaudio = "2.0.2.*"
pytorch = "2.0.1.*"
torchvision = "0.15.2.*"

[target.osx-arm64.dependencies]
pytorch = "2.0.1.*"
torchvision = "0.15.2.*"

[dependencies]
ipykernel = "6.25.1.*"
```

- `target`은 플랫폼별로 특화된 분기를 지정할 수 있다. 
  - `.`이후 플랫폼, 그리고 지정할 pixi 영역이 붙는다. 
  - 지정 가능한 pixi 영역은 `activation`, `dependencies`, `tasks` 세 가지이다. 

- 위 예시 파일을 살펴보자. 
  - `pixi.toml`을 플랫폼A에서 실행하면 `.pixi\` 폴더 아래 cuda 기반의 파이토치가 설치된다. 플랫폼B에는 `.pixi/` 아래 실리콘 맥 기반의 MPS를 활용한 파이토치가 설치된다. 
  - 채널은 플랫폼 별로 구별할 필요가 없다. 플랫폼A는 pytorch, nvidia를 쓰고 플랫폼B는 pytorch 채널을 쓴다. 

## VS Code 

VS Code에서 `.ipynb`로 작업하고 싶다면 간단하다. 윈도의 경우 해당 폴더가 작업 폴더로 잡혀 있다면 커널 선택 시 `.pixi...` 아래 설치된 커널이 바로 선택가능할 것이다. 만일 그렇지 않다면 커널을 직접 선택해주면 된다. 

:::{.column-margin}
VS Code에서 `파일` > `작업 영역에 폴더 추가`를 통해 작업 폴더를 지정할 수 있다. 터미널의 해당 폴더에서 `code .`을 실행해도 된다. 
:::

:::{.callout-tip title="인터프리터 경로 설정"}
`F1` > `Python: 인터프리터 선택` > `+인터프리터 경로 입력...`
:::

해당 프로젝트 폴더 안에 `.pixi`로 가자. OS 별로 구별해서 파이썬 바이너리 혹은 스크립트를 선택하면 된다. 

- (macos) `.pixi/env/bin/pyhon`
- (windows) `.pixi\env\python.exe`

## References

<https://prefix.dev/blog/launching_pixi>
