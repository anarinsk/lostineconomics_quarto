---
title: "Google Sheet와 파이썬 연동하기" 
description: "데이터 앱 만들기의 시작"   
author: "JS HUHH"
date: "06/06/2024"
image: "./images/cats-spreadsheet.webp"
categories: [computer-tool, google-sheet, dashboard]
#fig-align: center
#jupyter: python3
draft: false
---


## TL; DR

- Google Sheet를 파이썬과 연동하는 방법을 알아보자.
- 🔗[LINK](https://blog.lostineconomics.com/posts/computer-tool/2024-03-18-lazy-dashboard.html)와 함께 참고하시라.  

## 데이터 앱 만들기의 시작

데이터 앱을 만드는 최초의 단계는 데이터와 이를 다룰 도구(언어)의 연동이다. 별도로 DB를 만들지 않을 것이라면 데이터 소스는 아마도 엑셀, 구글 시트를 포함한 스프레드시트 형태일 것이다. 당신이 데이터 앱을 만들기로 했다면, 첫번째 단계가 여기 있다. 보통 데이터 분석에서 csv 등 데이터 파일을 로드하는 것에서 시작한다는 점을 떠올리면 좋겠다. 데이터 소스를 매번 수동으로 업로드할 것이 아니라면 구글 스프레드 시트와 같은 온라인 서비스와 데이터를 연동할 수 있다면 좋을 것이다. 

단도직입적으로 파이썬과 구글 스프레드 시트는 어떻게 연동하면 될까? 이 포스트 역시 내용을 까먹을 미래의 나놈을 위한 것이다. 

:::{.column-margin}
기본적인 내용은 [LINK](https://www.analyticsvidhya.com/blog/2020/07/read-and-update-google-spreadsheets-with-python/)를 참고했다. 
:::

## Google Sheet API 설정

### Google Cloud Console에서 프로젝트 생성 

[구글 클라우드 콘솔](https://console.cloud.google.com/)로 가서 새 프로젝트를 적절하게 생성하자. 계정이 없다면 적당히 생성하면 된다. 

:::{layout="[[-0.5, 1, -0.5]]"}
![프로젝트를 생성하자.](./images/gss-01.jpeg){#fig-1}
:::

### API 활성화

API를 활성화해야 한다. API를 활성화하는 메뉴에서 @fig-2\a 와 같이 두 개의 API를 활성화하자.  

활성화해야 하는 API는 `Google Drive API`, `Google Sheets API` 두 가지이다. 

:::{layout="[[-0.2, 1, -0.2]]"}
![Google Drive와 Google Sheet API 활성화](./images/gss-02.jpeg){#fig-2}
:::

### 사용자 인증 정보 만들기 

- 구글 시트에 접근하기 위해서는 "서비스 계정"(@fig-3)으로 만들도록 하자. 
- 사용자 인증 정보 유형은 "어플리케이션 데이터"이다(@fig-4). 

:::{layout="[[1, -0.1, 1]]" layout-valign="bottom"}
![서비스 계정 활성화](./images/gss-03.jpeg){#fig-3}

![API 설정](./images/gss-04.jpeg){#fig-4}
:::

### 키 생성하기 

- @fig-5\a 에서 생성된 서비스 계정을 클릭한다. 
- @fig-6\a 에서 보듯이 "키" 탭에서 JSON으로 생성하면 해당 JSON 파일이 다운로드 된다. 이 파일을 파이썬에서 구글 시트에 접근하는데 활용한다. 이 파일은 패스워드가 같은 것이므로 노출되지 않도록 주의하자.

:::{layout="[[1, -0.1, 1]]" layout-valign="bottom"}
![로봇 계정 선택](./images/gss-05.jpeg){#fig-5} 

![키 생성](./images/gss-06.jpeg){#fig-6}
:::

:::{.column-margin}
public 계정의 github에 크리덴셜 파일을 넣어두는 것이 가장 흔한 실수이다. 이 점 각별히 주의하도록 하자. public 계정이라도 마스킹 처리가 부분적으로 가능하고, private 계정이라고 해도, GitHub Pages 서비스는 가능하다. 
:::

### Google Spread Sheet 공유하기

구글 스프레드 시트의 상단의 공유 버튼에서 앞서 크리덴셜을 생성한 로봇 유저를 공유자로 지정한다. 

## 파이썬에서 작업하기 

패키지 설치 등의 과정은 생략하고 테스트할 수 있는 코드만 간략하게 소개한다.  

- 아래의 패키지를 설치하고 임포트한다. 구글 계정과의 연동을 위한 `google-api-python-client`, `oauth2client` 그리고 구글 스프레드 시트를 다루기 위한 `gspread` 패키지가 필요하다.

```python
#!pip3 install gspread
#!pip3 install --upgrade google-api-python-client oauth2client

#importing the required libraries
import gspread
import pandas as pd
from oauth2client.service_account import ServiceAccountCredentials
```

- 크리덴셜을 활용해서 해당 구글 스프레드 시트에 접근할 수 있다.
  - `add_json_file_here.json`에 앞서 다운로드한 JSON 파일을 넣으면 된다. 

```python
# define the scope
scope = ['https://spreadsheets.google.com/feeds','https://www.googleapis.com/auth/drive']

# add credentials to the account
creds = ServiceAccountCredentials.from_json_keyfile_name('add_json_file_here.json', scope)

# authorize the clientsheet 
client = gspread.authorize(creds)
```

- '구글 스프레드 서비스 이름'에는 접근할 구글 스프레드 시트의 타이틀을 넣는다. 왼쪽 상단에 있다. 

- 서비스 내의 개별 시트의 선택은 아래 `get_worksheet(0)`로 한다. 0번이 첫번째 위치한 시트이다. 시트의 위치가 바뀌면 이 역시 따라서 바뀌어야 한다. 

```python
# get the instance of the Spreadsheet
sheet = client.open('구글 스프레드 서비스 이름')

# get the first sheet of the Spreadsheet
sheet_instance = sheet.get_worksheet(0)
```

- `get_all_records()`를 통해 모든 데이터를 가져올 수 있고, 파이썬 dictionary 형태로 저장된다. 이를 pandas의 DataFrame으로 변환하면 된다.

```python
# get all the records of the data
records_data = sheet_instance.get_all_records()

# convert the json to dataframe
records_df = pd.DataFrame.from_dict(records_data)
```