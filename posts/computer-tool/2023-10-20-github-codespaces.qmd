---
title: "Perfectly Codespaces" 
description: 거의 완벽한 클라우드 코딩 환경  
author: "JS HUHH"
date: "10/20/2023"
image: "./images/codespaces.webp"
categories: [computer-tool]
#fig-align: center
filters:
   - lightbox
   #- line-highlight
lightbox: auto
#jupyter: python3
draft: false
format:
  html:
    code-line-numbers: true
    highlight-style: arrow
---

## TL; DR
코드 스페이스는 편리하고 저렴하게 활용할 수 있는 거의 완벽한 코딩 환경이다. 

## 넋두리 
회사에서 퍼블릭 깃헙을 쓸 때 종종 눈치가 보인다. 우선 아예 쓰지 못하게 하는 회사가 있다. 막지는 않는다고 해도 깃헙을 활용하는 개인 작업에 회사 컴퓨터 쓰는 일이 그리 적절해 보이지 않는다. 그렇다고 (솔직히) 회사에서 개인 작업을 아예 안 할 수는 없다. 만일 온라인 도구만으로 필요한 작업을 다 할 수 있다면 어떨까? 

깃헙이 이미 이런 기능을 제공하고 있다. 깃헙 코드스페이시스(깃헙 코스)는 웹을 통해 개발과 컴퓨팅 환경을 상당한 수준에서 제공하는 서비스다. 노트북 환경에 한정된 구글 코랩과 달리 깃헙 코스는 온전한 우분투 환경을 제공한다! 클라우드에 별도의 환경을 세팅하지 않는 이상 깃헙 코스에 버금가는 유연하고 편리한 컴퓨팅 환경을 갖추기 쉽지 않을 것이다. 게다가 깃헙 코스는 리포의 브랜치에 따라서 서로 다른 코스를 붙일 수 있다. 비슷한 개발 환경을 미묘하게 바꿔야 할 필요가 있다면 유용한 기능이 될 것이다. 유료 사용자라면 머신의 유형(하드웨어 스펙) 또한 쉽게 바꿀 수 있다. 

:::{.column-margin}
자세한 것은 [링크](
https://docs.github.com/en/codespaces/customizing-your-codespace/changing-the-machine-type-for-your-codespace)를 참고하자. 
:::

## 깃헙 코스 활성화

깃헙 코스는 깃헙의 레포지토리를 기반으로 동작한다. 깃헙 레포지토리를 만들고, 레포지토리의 `Settings` 탭으로 이동한다. `Settings` 탭에서 `Options` 메뉴를 선택하고, `Features` 섹션에서 `Codespaces`를 활성화한다.

:::{layout="[-4,10,-4]"}
![](https://raw.githubusercontent.com/simonw/codespaces-datasette/main/get-started.jpg){}
:::

그림처럼 깃헙 페이지의 오른쪽 상단에 `Code`을 누르면 `Open with Codespaces` 메뉴가 나타난다. 이 메뉴를 선택하면 깃헙 코스가 활성화된다. 활성화된 이후에는 VS Code와 동일한 환경이 제공된다. 별도로 구구절절하게 설명할 것이 없다는 이야기다. 자세한 것은 아래 페이지를 참고하면 된다. 

![[LINK](https://docs.github.com/ko/codespaces/overview)를 참고하자.](https://nira.com/wp-content/uploads/2021/11/image2-3-1336x848.png)

## 나의 활용법 

깃헙 코스를 내가 어떻게 쓰고 있는지 간단히 소개하겠다. 물론 이는 미래에 모든 것을 망각할 나 놈을 위한 동어반복이다. 깃헙 코스를 올리고 처음 구동할 때, 자신의 다른 VS Code의 환경과 연동이 되어 있다면 확장을 설치하는데 시간이 좀 걸린다. 한번만 참고 기다리면 된다. 

### 업데이트와 업그레이드 

최초에 설치한 우분투 디스트는 업데이트와 업그레이드가 필요하다. 아래와 같이 실행하자. 

```bash
> sudo apt update 
> sudo apt upgrade -y # sudo full-upgrade -y
```

### Brew 설치 

역시 가벼운 앱들은 brew로 깔아서 쓰는 것이 좋다. 리눅스에서 brew를 설치하는 방법은 홈페이지 첫번째 화면에 잘 소개되어 있다. 

<https://brew.sh>

```bash
> /bin/bash -c "$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/HEAD/install.sh)"
```

위와 같이 brew 설치는 마치면 셸 별로 특화된 추가 설정 명령이 뜬다. 그런데 깃헙 코스의 경우 zsh이 깔여 있음에도 불구하고 brew가 bash 환경에 깔린다. 따라서 셸을 다시 실행했을 때 brew가 인식되지 않는다. 이 문제를 해결하기 위해서 `~/.zshrc`에 아래의 명령을 심도록 하자. 실행되면 리눅스용 brew가 셸 환경에 설정된다.    

```bash
eval $(/home/linuxbrew/.linuxbrew/bin/brew shellenv)
```

### pixi 설치 

brew를 이용해서 pixi를 설치하자. 

```bash
> pixi init . 
> pixi add python=3.11 pandas scipy matplotlib ipykernel 
```

이 pixi를 통해 설치된 파이썬 환경은 깃헙 코스에서 실행되는 파이썬 명령의 가상 환경으로 기능한다. VS Code에서 가상 환경을 설정하는 방법은 

:::{.callout-tip title="파이썬 실행 환경 설정"}
F1 > "Python: 파이썬 인터프리터 선택"
:::

그리고 `.pixi/env/bin/python`을 선택하면 된다. 파이썬 인터프리터가 선택되면 자연스럽게 가상 환경으로 지정된다. 

### Quarto 

brew를 통해 설치할 수 있으면 좋겠지만 Quarto는 별도로 설치해야 한다. 아래 링크를 참고하자. 

<https://docs.posit.co/resources/install-quarto/#quarto-deb-file-install>

최신 버전의 설치 방법은 아래와 같다. 

```bash
> sudo curl -LO https://quarto.org/download/latest/quarto-linux-amd64.deb # 최신 버전 다운로드
> sudo apt-get install gdebi-core
> sudo gdebi quarto-linux-amd64.deb
```

