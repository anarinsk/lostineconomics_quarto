---
title: "게으르게 만드는 대시보드" 
description: "소박하고 개인적인"   
author: "JS HUHH"
date: "03/18/2024"
image: "./images/cat-sketch.webp"
categories: [computer-tool, document-tool, quarto]
lightbox: auto
#fig-align: center
filters:
   - lightbox
   #- line-highlight
#jupyter: python3
draft: false
format:
  html:
    highlight-style: pygments
    #code-line-numbers: true
    code-block-bg: true
    code-block-border-left: "#31BAE9"
---

## TL; DR
Quarto Dashboard를 활용해서 개인용 보드를 만들어 보자. 

## 왜 정적 웹(static web)인가? 

대시보드로 활용할 수 있는 도구는 다양하다. 본격적으로 웹 프로그래밍을 활용하지 않아도 파이썬으로 부릴 수 있는 streamlit, gradio를 비롯해 다양한 서비스들이 있다. 그런데 이러한 본격적인 서비스들에는 몇 가지 '개인적' 단점이 있다.

- 서비스를 올리려면 '다소' 전문적인 웹 서버가 필요하다. 자체적인 방식으로 서비스 호스팅을 구축하거나 해당 회사에서 제공하는 무료 티어를 쓸 수 있다. 
- 다소 느리다. 개인 용도로 쓸 때 느리다는 것 자체가 문제는 아니다. 대시보드의 기능을 제한하더라도 좀 더 팍팍 뜨면 좋겠다는 의미이다. 

이 단점이 그리 대단한 것은 아니다. 스트림릿에서 제공하는 기본 서비스로도 많은 것들을 구현할 수 있다. 하지만 더 간단하고 더 게으르게 뭔가 하고 싶은 나 같은 인간에게는 여전히 복잡하고 거추장스러워 보이기도 한다. 

사실 (개인용) 대시보드를 쓸 때 뭔가를 인터랙티브하게 선택하는 경우는 드물다. 대체로 주요 용도는 내가 보고 싶은 정보를 한번에 모아서 본다는 데 있다. 그 용도가 보는 데에만 있다면 미리 렌더링된 정보를 보여주는 정적 웹(static web)으로 충분하지 않을까? 정적 웹은 Github pages를 비롯해 공짜로 활용할 수 있는 다양한 서비스가 존재해서 선택의 범위도 넒은데 말이다. 

## Quarto Dashboard 

정적인 웹 페이지로 인터랙티비티가 제한된 대시보드를 만들기로 했다면 툴을 선택해야 한다. 마침 딱 적당한 툴이 있다. 문서 작성 도구 Quarto에서 제공하는 [Quarto Dashboards](https://quarto.org/docs/dashboards/){ target="_blank" }라는 도구가 있다. 쿼토에 익숙한 사람이라면 링크를 둘러보면 장점을 쉽게 파악할 수 있을 것이다. 자세한 설명은 생략한다. 

:::{ .column-margin }
정적 웹이라고 해서 인터랙티비가 전혀 없는 것은 아니다. 소개되어 있듯이, Plotly, Leaflet, Jupyter Widgets, htmlwidgets 등을 쓸 수 있어서 제한된 수준에서 인터랙티브한 요소를 구현할 수 있다. 
:::

## 두 가지 문제 그리고 해결책 

이렇게 대시보드를 만드는 것까지는 좋은데 당장 떠오르는 두 가지 결정적인 아쉬운 대목이 있다. 인증 시스템과 데이터 업데이트의 자동화가 그것이다. 일단 아쉬운대로 (불완전한) 두 가지 해결책을 제시하겠다. 

### 최소한의 암호화 

정적 웹이라는 것은 기본적으로 html 문서로 구성된다. 인증은 해당 문서의 열람 앞에 존재할 것이기 때문에 사실 그 부재를 아쉬워하는 것이 적절하지는 않다. 그럼에도 아쉽다! 깃허브 기준으로 private repo에서 pages를 만들면 전체 공개로 외부에 제공된다. credentials와 같은 민감한 정보는 리포를 private로 만들어 감출 수 있다. 대시 보드 자체에 올라가는 정보가 민감한 정보라면 어떻게 해야 할까? 최소한 페이지에 암호라도 있었으면 싶을 것이다. 이메일로 전달되는 각종 고지서에 적용된 암호화 정도면 충분하겠다. 

[Staticrypt](https://github.com/robinmoisson/staticrypt){target="_blank"}이라는 도구를 쓰면 html 문서에 암호를 걸 수 있다. 해당 페이지를 깃허브 페이지스로 서브하면 암호를 먼저 입력해야 내용을 볼 수 있다. 이것이 제대로 된 로그인 시스템이라고 할 수는 없지만, 개인적인 용도의 안전 장치 정도로는 충분하다.

### 데이터 업데이트 

활용하는 데이터가 변하지 않는다면 해당 데이터를 한번 읽어서 대시보드를 제공하면 그만이다. 하지만 대시보드가 필요한 상황과 맥락에서 데이터가 이렇게 고정된 상황은 별로 없을 것이다. 데이터를 일정한 주기로 업데이트해야 한다면 어떻게 해야할까? 우선 데이터가 고빈도(high frequency)로 변하는 상황이라면 스트림릿과 같은 본격적인 대시보드 도구를 부리는 게 좋다. 이렇게 고빈도의 업데이트가 필요하지 않다면, 깃허브 페이지스를 통해서 데이터의 업데이트를 거의 완벽하게 구현할 수 있다. 

깃허브는 actions라는 자동화 도구를 제공한다. 리포의 `.github/workflows` 내에 위치한 yml 파일을 통해 일정한 순서로 여러가지 작업을 지시할 수 있다. 데이터 업데이트를 위해서 지시할 작업은 간단하다. 이용자가 미리 정해둔 시간 간격을 기준 마다 문서를 다시 생성하면 된다. 이떄 코드도 같이 실행될텐데 해당 코드에 따라서 업데이트된 데이터를 불러올 수 있다. 

:::{ .column-margin }
깃허브 액션스를 자세하게 다루지는 않겠다. 개념은 OS(주로 Ubuntu)를 불러와서 해당 OS 하에서 여러가지 작업을 자동화할 수 있는 도구다. Ubuntu를 좀 써봤다고 쉽게 생각하면 큰 코 다칠 수 있다. 예를 들어 깃헙 페이지스 하나 퍼블리시하는 데에도 여러가지 행동 조합이 필요하다. 따라서 개인지 작성하기 보다는 이미 작성된 actions를 가져다가 쓰는 것이 좋다. yml 코드를 보면 `uses: actions/checkout@v4`, `uses: actions/setup-python@v4`와 같은 내용을 볼 수 있다. 사전에 정의된 액션스를 가져다가 쓰는 것이고 필요할 경우 `with` 구문을 통해서 나에게 맞는 설정을 추가할 수 있다. 이런 식으로 기존에 검증된 actions 스크립트를 쓰는 것이 압도적으로 편리하고 안전하다. 
:::

링크를 보면 GitHub Actions를 통해서 Quarto 문서를 생성하고 퍼블리싱하는 방법이 잘 소개되어 있다. 일정한 시간 단위로 자동화하고 싶다면 코드의 맨 윗 부분을 아래와 같이 수정하면 된다. 

```yml 
on:
  #schedule:
    # 실제 스케쥴 작업이 시작될 cron을 등록하면 됩니다.
    # 크론은 https://crontab.guru/ 여기서 확인하면 좋을 것 같습니다.
    # 이 크론은 매 4시간 마다 실행됩니다.
    #- cron: '0 */4 * * *'  
  #workflow_dispatch:    
  #push:
  #  branches: main
  schedule:
    #- cron: '*/30 * * * *' # 매 30분마다 실행
    - cron: '0 */3 * * *' # 매 3시간마다 실행
```

`on` 항목에 `schedule`을 설정하고 `cron`을 쓰면 crontab 규칙에 따라서 실행 간격을 지정할 수 있다. crontab 규칙을 따르므로 유연하게 실행 간격의 룰을 정할 수 있다. 

## 데이터 업데이트 + 암호화?

앞서 살펴본 두 개의 요소를 조합하는 것도 가능하다! 위의 문서 생성 및 퍼블리시 과정과 압호화 과정을 Github Actions에서 결합하면 된다. 깃헙 액션스는 정말로 강력한 기능이다! 방법은 다음과 같다. 

- 정보의 업데이트를 통해서 최신 대시보드 html 및 퍼블리싱 
- gh-pages 브랜치에 서브되는 html 페이지의 암호화 

해당 명령을 구현하는 사례 리포를 만들어 두었다. 아래를 참고하시라. 암호는 `0000`이다. public repo이니 관심이 있으시면 내용을 뜯어보시면 되겠다. 물론 이 리포를 개인적인 용도로 사용한다면 해당 리포 자체는 private으로 바꿔야 한다. 그래야 암호가 노출되지 않을 것이다. 

<https://anarinsk.github.io/example_pages-with-password/>{ target="_blank" }